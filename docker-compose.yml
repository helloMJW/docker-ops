version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  gitlab:
    driver: ${VOLUMES_DRIVER}
  grafana:
    driver: ${VOLUMES_DRIVER}
  jenkins:
    driver: ${VOLUMES_DRIVER}
  skywalking:
    driver: ${VOLUMES_DRIVER}
  svn:
    driver: ${VOLUMES_DRIVER}

services:
### jenkins ##################################
    jenkins:
      #image: registry.cn-shenzhen.aliyuncs.com/webdock/workspace:1.0
      build:
        context: ./jenkins
        args:
          - http_proxy=${HTTP_PROXY}
          - https_proxy=${HTTPS_PROXY}
          - no_proxy=${NO_PROXY}
      labels:
        - "docker.group=mjw"
      environment:
      - JENKINS_UC_DOWNLOAD=https://mirrors.tuna.tsinghua.edu.cn/jenkins/
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/jenkins/jenkins_home:/var/jenkins_home
      ports:
        - "${JENKINS_WEB_PORT}:8080"
        - "${JENKINS_MAP_PORT}:50000"
      networks:
        - frontend
        - backend

### Gitlab ################################################
    gitlab:
      build:
        context: ./gitlab
      restart: always
      environment:
        GITLAB_OMNIBUS_CONFIG: |
          external_url '${GITLAB_DOMAIN_NAME}'
      volumes:
        - ${DATA_PATH_HOST}/gitlab/config:/etc/gitlab
        - ${DATA_PATH_HOST}/gitlab/data:/var/opt/gitlab
        - ${LOG_PATH}/gitlab:/var/log/gitlab
      ports:
        - "${GITLAB_HOST_HTTP_PORT}:80"
        - "${GITLAB_HOST_HTTPS_PORT}:443"
        - "${GITLAB_HOST_SSH_PORT}:22"
      networks:
        - backend
### svn ################################################
    svn:
      build:
        context: ./svn
      restart: always
      volumes:
        - ${DATA_PATH_HOST}/svn:/var/opt/svn
      ports:
        - "${SVN_PORT}:3690"
      networks:
        - backend
### Grafana ################################################
    grafana:
      build:
        context: ./grafana
      volumes:
        - ${DATA_PATH_HOST}/grafana:/var/lib/grafana
      ports:
        - "${GRAFANA_PORT}:3000"
      networks:
        - backend
### influxdb ####################################################
    influxdb:
      container_name: influxdb
      build:
        context: ./influxdb
      environment:
        - PRE_CREATE_DB=cadvisor
      ports:
        - "${INFLUXDB_WEB_PORT}:8083"
        - "${INFLUXDB_API_PORT}:8086"
      expose:
        - "8090"
        - "8099"
      volumes:
        - ./influxdb/conf:/etc/influxdb
        - ${DATA_PATH_HOST}/influxdb/data:/var/lib/influxdb/data
        - ${DATA_PATH_HOST}/influxdb/meta:/var/lib/influxdb/meta
        - ${DATA_PATH_HOST}/influxdb/wal:/var/lib/influxdb/wal
### chronograf ####################################################
    chronograf:
      container_name: chronograf
      build:
        context: ./chronograf
      ports:
        - "${CHRONOGRAF_PORT}:8888"
      volumes:
        - ${DATA_PATH_HOST}/chronograf:/var/lib/chronograf

### prometheus ####################################################
    prometheus:
      build:
        context: ./prometheus
      restart: unless-stopped
      ports:
        - '9090:9090'
      user: '0'
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/data'
        - '--storage.tsdb.retention=90d'
        - '--web.enable-lifecycle'
      volumes:
        - ./prometheus/conf:/etc/prometheus
        - ${DATA_PATH_HOST}/prometheus/data:/prometheus/data